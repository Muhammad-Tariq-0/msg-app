{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","messaging","Notification","requestPermission","then","permission","console","log","getToken","token","catch","err","navigator","serviceWorker","register","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iQAYEA,IAASC,cAVU,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAIQR,QAAf,ECgBaS,MAzBf,WACE,IAAMC,EAAWV,EAASU,YAgB1B,OAfAC,aAAaC,oBAAoBC,MAAK,SAACC,GACrC,GAAIA,EAEA,OADAC,QAAQC,IAAI,sBACLN,EAAUO,WAAWJ,MAAK,SAACK,GAC9BH,QAAQC,IAAI,SAASE,MAGzBH,QAAQC,IAAI,gCAEjBG,OAAM,SAACC,GACNL,QAAQC,IAAI,mCAAmCI,MAGnDC,UAAUC,cAAcC,SAAS,6BAG7B,yBAAKC,UAAU,OACd,6CCXCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BZ,UAAUC,cACPC,SAASS,GACTnB,MAAK,SAAAqB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACflB,UAAUC,cAAckB,YAI1BzB,QAAQC,IACN,iHAKEiB,GAAUA,EAAOQ,UACnBR,EAAOQ,SAASP,KAMlBnB,QAAQC,IAAI,sCAGRiB,GAAUA,EAAOS,WACnBT,EAAOS,UAAUR,WAO5Bf,OAAM,SAAAwB,GACL5B,QAAQ4B,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBf,GACvB,GAA6C,kBAAmBZ,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,GAAwBvB,OAAOC,SAASuB,MACpDC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMkB,GAAN,sBAEPzB,IAgEV,SAAiCO,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5B1C,MAAK,SAAA2C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMhD,MAAK,SAAAqB,GACjCA,EAAa4B,aAAajD,MAAK,WAC7Bc,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1Bd,OAAM,WACLJ,QAAQC,IACN,oEAvFAgD,CAAwBhC,EAAOC,GAI/BZ,UAAUC,cAAcuC,MAAMhD,MAAK,WACjCE,QAAQC,IACN,iHAMJe,EAAgBC,EAAOC,OClC/BX,K","file":"static/js/main.658234f5.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nlet firebaseConfig = {\n  apiKey: \"AIzaSyC7BjQLckdKho0lpatVNoGAoG47b-7s5SQ\",\n  authDomain: \"msg-app-5d6af.firebaseapp.com\",\n  databaseURL: \"https://msg-app-5d6af.firebaseio.com\",\n  projectId: \"msg-app-5d6af\",\n  storageBucket: \"msg-app-5d6af.appspot.com\",\n  messagingSenderId: \"509730574407\",\n  appId: \"1:509730574407:web:13ff8e35ad6dd4bfe32162\"\n  };\n \n  firebase.initializeApp(firebaseConfig);\n  export default firebase;\n  \n//   const messaging= firebase.messaging();\n//   export function initNofication() {\n//     Notification.requestPermission().then((permission)=>{\n//         if (permission) {\n//             console.log(\"Permission Granted\")\n//             return messaging.getToken().then((token)=>{\n//                 console.log(\"Token:\",token);\n//             })\n//         } else {\n//             console.log(\"Error in Token generation\");\n//         }\n//     }).catch((err)=>{\n//         console.log(\"Error in Permission Grantation :\",err)\n//     })\n//   }\n  \n","import React from 'react';\nimport './App.css';\nimport firebase from './firebase'\n\nfunction App() {\n  const messaging= firebase.messaging();\n  Notification.requestPermission().then((permission)=>{\n    if (permission) {\n        console.log(\"Permission Granted\")\n        return messaging.getToken().then((token)=>{\n            console.log(\"Token:\",token);\n        })\n    } else {\n        console.log(\"Error in Token generation\");\n    }\n}).catch((err)=>{\n    console.log(\"Error in Permission Grantation :\",err)\n})\n\nnavigator.serviceWorker.register('/firebase-messaging-sw.js');\n\n  return (\n    <div className=\"App\">\n     <h1>Hello World</h1>\n     {/* <button onClick={initNofication}>Configure Push Notif...</button> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}